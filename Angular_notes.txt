From Video : 

SECTION 3 : STEP 06:
npm (node package manager downloads and install javascript frameworks, example : npm install jquery)
npm -v
node -v
npm install -g @angular/cli
ng --version
ng new Projectname
ng serve 
ng lint 

Linting is a process which checks for coding standards and this standards are defined in tslint.json

ng build - creates a dist folder and we can deploy it to production

dist folder contains files(main.js, polyfill.js, vendor.js etc) which are sufficient to deploy a specific angular application to production.

ng test - runs the unit test written for angular application, typically unit test for angular are written in a framework called Jasmine and we use karma to run this unit test

Unit test for angular are defined in karma.config.js and unit test will be written as part of the project in files like .specs.ts

Unit test tests individual components one at a time.

ng e2e (end to end testing) - launch entire angular application
In Angular end to end testing is written using protractor and Protractor uses selenium in background.
Files(Protractor.conf.js and tsconfig.) required for end to end testing is present in e2e directory.

All the angular commands are defined in angular.json file

SECTION 3 : STEP 07:

app directory : All the components and modules will be present inside.
assets directory : it contains all the images (things which will be used in the project as it is).
environments directory : All the configurations for each environment (dev,test,acceptance,production) are present here.

browser understands javascript ,so all the source code written in typescript as part of the angular application, so this code needs to be converted and that specification is specified in tsconfig.json file

To document anything about the project, we can mention it in README.md file.

package.json specifies all the packages,frameworks as well as the tools,needed to run unit test,integration test and are required to run an angular application.

All the packages(frameworks like @angular/forms, @angular/core, @angular/router, etc) or modules specified in package.json are downloaded by node package manager using npm install, then it downloads all the dependencies mentioned inside node_modules directory

whenever we create an angular application using ng new application_name command then npm install is automatically executed, donot have to do it explicitly.

gitignore file contains the folder names which should not be committed to version control (git) 

polyfill.ts take cares of all the browser incompatibilities (diff version of javascript) (ensures all the codes which we write is compatible across all the browsers)

index.html and main.ts bootstraps an angular application.

style.css :  we specify styling globally ( styles which are used across the whole application)

test.ts is the starting point for running unit tests, it is used when we run ng test

SECTION 3 : STEP 08:

selector specifies tag name for the component, it is required to make use of a particular component, example: <app-root></app-root>
templateUrl specifies the location of the html view or the template for a specific component.
styleUrls specifies the location of the css file or styling for a specific component

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

Data binding is all about taking some data from the component and binding it to the view.

app.component.ts file or .ts file contains the  code(Written in typescripts) to handle the view actions

SECTION 3 : STEP 09: Udemy : Ranga : Java Fullstack with Angular and Spring

how to use templateUrl and template inside component
We are creating 1 div inside app.component.html and 1 div inside index.html and created a simple style inside app.component.css to show that this style will be effective on the specific component i.e AppComponent
the scope of component of .component.css style specifies to that particular component

SECTION 3 : STEP 10: Udemy : Ranga : Java Fullstack with Angular and Spring

1) how to create a component using ng generate component component_name or ng g c component_name
Example : ng g c welcome
The above syntax will automatically create a component called WelcomeComponent
As the component is created, in console we can see the log as there are 4 files created (welcome.component.html,.component.specs.ts,.component.ts, .component.css,  and 1 file updated (src/app/app.module.ts)

Every Angular component (@Component) in a project has to be associated with Angular Module(@NgModule) inside declarations array.

2) once the component is created or added to the project, we cannot roll it back, so it is very important to get the correct names for component.Sim

3) Similarly like java, in Typescript if a class implements an interface, then we have to implement all the methods of that interface or need to make it abstract method.

export class WelcomeComponent implements OnInit

4) we have included WelcomeComponet inside AppComponent through app-welcome selector using it inside app.component.html (<app-welcome></app-welcome>)
To show one component(WelcomeComponent) inside another component (AppComponent) then selector of the WelcomeComponent(app-welcome) needs to be used inside view [app.component.html (<app-welcome></app-welcome>)]

